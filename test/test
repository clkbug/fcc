#!/bin/bash

# set -x

assert() {
  expected="$1"
  input="$2"

  ./fcc "$input" > /tmp/tmp.s
  if [ $? -ne 0 ]; then
    echo "'./fcc $input' failed"
    exit 1
  fi
  riscv32-unknown-elf-gcc -o /tmp/tmp -g /tmp/tmp.s test/predefined.c
  qemu-riscv32 /tmp/tmp
  actual="$?"

  if [ "$actual" = "$expected" ]; then
    echo "$input => $actual"
  else
    echo "$input => $expected expected, but got $actual"
    exit 1
  fi
}



assert 0 "main() {return 0;}"
assert 100 "main() {return 100;}"
assert 1 "main() {return 1;}"
assert 3 "main() {return 1+2;}"
assert 7 "main() {return 1+2*3;}"
assert 1 "main() {return 0 + 1;}"
assert 5 "main() {return 2 + 3;}"
assert 1 "main() {return 3 - 2;}"
assert 10 "main() {return 1 +2+3 - 4   + 5 + 6 - 7 + 8 -9 + 15 - 10;}"
assert 7 "main() {return 1 + 2*3;}"
assert 62 "main() {return 4 * 5 + 6 * 7;}"
assert 53 "main() {return (1 + 2) * 3 + 4 * (5 + 6);}"
assert 0 "main() {return 0 == 1;}"
assert 1 "main() {return 10 == 10;}"
assert 1 "main() {return 0 != 1;}"
assert 0 "main() {return 10 != 10;}"
assert 1 "main() {return 1 + 2 == 3;}"
assert 1 "main() {return 1 + 2 + 3 == 2 * 3;}"
assert 1 "main() {return 1 < 2;}"
assert 0 "main() {return 1 < 1;}"
assert 0 "main() {return 1 < 0;}"
assert 1 "main() {return 1 + 2 <= 3;}"
assert 0 "main() {return 1 + 2 < 3;}"
assert 0 "main() {return 5 > 6;}"
assert 0 "main() {return 2 + 3 > 2 * 3;}"
assert 1 "main() {return 7 <= 8;}"
assert 1 "main() {return 8 <= 8;}"
assert 0 "main() {return 9 <= 8;}"
assert 1 "main() {return 8 >= 7;}"
assert 1 "main() {return 2 * 4 >= 3 + 4;}"
assert 0 "main() {int a; return a;}"
assert 0 "main() {int b; return b;}"
assert 0 "main() {int a; int b; return a + b;}"
assert 1 "main() {int a; return a = 1;}"
assert 6 "main() {int a; return a = 1 * 2 + 3 - 4 + 5;}"
assert 3 "main() {int a; return 1 + (a = 2);}"
assert 3 "main() {int a; return (a=1) + 2;}"
assert 2 "main() {int a; return (a=1) + a;}" # 評価順依存？
assert 3 "main() {int a; int b; return a = b = 1 + 2;}"
assert 2 "main() {int a; int b; return a = (b = 1) + 1;}"
assert 27 "main() {int a; int b; return (a = 1) + (b = 2) + (a + 3) * (b + 4);}"
assert 0 "main() {int abc; return abc = 0;}"
assert 1 "main() {int abc; return abc = 1;}"
assert 3 "main() {int abc; return 1 + (abc = 2);}"
assert 5 "main() {int abc; return 1 + (abc = 2) + abc;}"
assert 7 "main() {int first; int second; return (first = 1 + 2) + (second = 3 + 4) - first;}"
assert 3 "main() {int first; int second; return (first = 1 + 2) + (second = 3 + 4) - second;}"
assert 42 "main() {int first; int second; int third; return (first = 1 + 2) + (second = 3 + 4) + (third = 5 + 6) + first + second + third;}"
assert 0 "main() {int a; int b; int c; a = 1; b = 2; c = 3; return a + b - c; return a - b + c;}"
assert 2 "main() {int a; int b; int c; a = 1; b = 2; c = 3; return a - b + c;}"
assert 21 "main() {int first; int second; int third; first = 1 + 2; second = 3 + 4; third = 5 + 6; return first + second + third;}"
assert 2 "main() {int a; a = 1; if(a) return 2; else return 3;}"
assert 3 "main() {int a; a = 0; if(a) return 2; else return 3;}"
assert 2 "main() {int a; a = 1; if(a) return 2; return 3;}"
assert 3 "main() {int a; a = 0; if(a) return 2; return 3;}"
assert 10 "main() {int a; a = 0; while(a < 10) a = a + 1; return a;}"
assert 20 "main() {int a; int b; a = 0; b = 20; while(a < b) a = a + 1; return a;}"
assert 1 "main() {int i; for(i=1;i<=10;i=i+1)return i;}"
assert 100 "main() {int a; int i; a = 100; for(i = 0; i < 0; i = i + 1) a = a + 1; return a;}"
assert 1 "main() {int a; int i; a = 0; for(i = 0; i < 1; i = i + 1) a = a + 1; return a;}"
assert 10 "main() {int a; int i; a = 0; for(i = 0; i < 10; i = i + 1) a = a + 1; return a;}"
assert 45 "main() {int a; int i; a = 0; for(i = 0; i < 10; i = i + 1) a = a + i; return a;}"
assert 45 "main() {int sum; int i; sum = 0; i = 0; while(i < 10) { sum = sum + i; i = i+ 1; } return sum;}"
assert 1 "main() {return f1();}"
assert 1 "main() {int a; a = 100; return f1();}"
assert 100 "main() {return f100();}"
assert 100 "main() {int a; a = 1; return f100();}"
assert 31 "main() {int a; int b; a = 10; b = 20; return a + f1() + b;}"
assert 130 "main() {int a; int b; a = 10; b = 20; return a + f100() + b;}"
assert 11 "main() {return inc(10);}"
assert 100 "main() {return inc(99);}"
assert 11 "main() {return inc(4 + 6);}"
assert 11 "main() {return inc(1 + 2 + 3 + 4);}"
assert 11 "main() {int a; a = 10; return inc(a);}"
assert 22 "main() {int a; a = 10; return inc(a + 11);}"
assert 3 "main() {return plus(1, 2);}"
assert 7 "main() {return plus(1+2, 4);}"
assert 10 "main() {return plus(1+2, 3+4);}"
assert 10 "main() {return plus(plus(1,2), plus(3,4));}"
assert 10 "main() {int a; int b; a =plus(1,2); b= plus(3,4); return plus(a, b);}"
assert 1 "myf1() { return 1; } main() {return myf1();}"
assert 100 "myf100() { return 100; } main() {return myf100();}"
assert 101 "myf1() { return 1; } myf100() { return 100; } main() {return myf1() + myf100();}"
assert 100 "my_id(int a) { return a; } main() {return my_id(100); }"
assert 2 "my_inc(int a) { return a+1; } main() { return my_inc(1); }"
assert 9 "my_inc(int a) { return a+1; } main() { return my_inc(1) + my_inc(2) + my_inc(3); }"
assert 3 "my_plus(int a, int b) { return a + b; } main () { return my_plus(1, 2); }"
assert 36 "my_plus(int a, int b, int c, int d) { return a + b + d + c; } main () { return my_plus(1, 2, 3, 4) + my_plus(5,6,7,8); }"
assert 55 "my_sum(int n) { int s; int i; s=0; for(i=0;i<=n;i=i+1) { s = s + i; } return s; } main () { return my_sum(10); }"
assert 100 "my_recur(int n) { if(n==0) { return 100; } else { return my_recur(n-1); } } main () {return my_recur(0); }"
assert 100 "my_recur(int n) { if(n==0) { return 100; } else { return my_recur(n-1); } } main () {return my_recur(1); }"
assert 100 "my_recur(int n) { if(n==0) { return 100; } else { return my_recur(n-1); } } main () {return my_recur(2); }"
assert 1 "my_fact(int n) { if(n==0) { return 1; } else { return n * my_fact(n-1); } } main () {return my_fact(0); }"
assert 1 "my_fact(int n) { if(n==0) { return 1; } else { return n * my_fact(n-1); } } main () {return my_fact(1); }"
assert 120 "my_fact(int n) { if(n==0) { return 1; } else { return n * my_fact(n-1); } } main () {return my_fact(5); }"
assert 100 "main() { int a; a = 100; return *(&a); }"
assert 100 "main() { int a; int b; a = 100; b = &a; return *b; }"
assert 111 "main () {int a; int b; int c; int d; a = 111; b = &a; c = &b; d = &c; return ***d; }"
assert 100 "main () { int a; int* b; a = 100; b = &a; return *b; }"
assert 100 "main () { int a; int* b; b = &a; *b = 100; return *b; }"
assert 100 "main () { int a; int* b; b = &a; *b = 100; return a; }"

echo OK