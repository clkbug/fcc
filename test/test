#!/bin/bash

# set -x

assert() {
  expected="$1"
  input="$2"

  ./fcc "$input" > /tmp/tmp.s
  if [ $? -ne 0 ]; then
    echo "'./fcc $input' failed"
    exit 1
  fi
  riscv32-unknown-elf-gcc -o /tmp/tmp -g /tmp/tmp.s
  qemu-riscv32 /tmp/tmp
  actual="$?"

  if [ "$actual" = "$expected" ]; then
    echo "$input => $actual"
  else
    echo "$input => $expected expected, but got $actual"
    exit 1
  fi
}



assert 0 "return 0;"
assert 100 "return 100;"
assert 1 "return 0 + 1;"
assert 5 "return 2 + 3;"
assert 1 "return 3 - 2;"
assert 10 "return 1 +2+3 - 4   + 5 + 6 - 7 + 8 -9 + 15 - 10;"
assert 7 "return 1 + 2*3;"
assert 62 "return 4 * 5 + 6 * 7;"
assert 53 "return (1 + 2) * 3 + 4 * (5 + 6);"
assert 0 "return 0 == 1;"
assert 1 "return 10 == 10;"
assert 1 "return 0 != 1;"
assert 0 "return 10 != 10;"
assert 1 "return 1 + 2 == 3;"
assert 1 "return 1 + 2 + 3 == 2 * 3;"
assert 1 "return 1 < 2;"
assert 0 "return 1 < 1;"
assert 0 "return 1 < 0;"
assert 1 "return 1 + 2 <= 3;"
assert 0 "return 1 + 2 < 3;"
assert 0 "return 5 > 6;"
assert 0 "return 2 + 3 > 2 * 3;"
assert 1 "return 7 <= 8;"
assert 1 "return 8 <= 8;"
assert 0 "return 9 <= 8;"
assert 1 "return 8 >= 7;"
assert 1 "return 2 * 4 >= 3 + 4;"
assert 0 "return a;"
assert 0 "return b;"
assert 0 "return a + b;"
assert 1 "return a = 1;"
assert 6 "return a = 1 * 2 + 3 - 4 + 5;"
assert 3 "return 1 + (a = 2);"
assert 3 "return (a=1) + 2;"
assert 2 "return (a=1) + a;" # 評価順依存？
assert 3 "return a = b = 1 + 2;"
assert 2 "return a = (b = 1) + 1;"
assert 27 "return (a = 1) + (b = 2) + (a + 3) * (b + 4);"
assert 0 "return abc = 0;"
assert 1 "return abc = 1;"
assert 3 "return 1 + (abc = 2);"
assert 5 "return 1 + (abc = 2) + abc;"
assert 7 "return (first = 1 + 2) + (second = 3 + 4) - first;"
assert 3 "return (first = 1 + 2) + (second = 3 + 4) - second;"
assert 42 "return (first = 1 + 2) + (second = 3 + 4) + (third = 5 + 6) + first + second + third;"
assert 1 "return 1;"
assert 3 "return 1+2;"
assert 7 "return 1+2*3;"

echo OK